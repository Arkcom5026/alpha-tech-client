// src/features/stockItem/components/BarcodePrintTable.jsx

import React, { useState, useMemo, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import useBarcodeStore from '@/features/barcode/store/barcodeStore';

const BarcodePrintTable = ({ receipts }) => {
  const navigate = useNavigate();
  const { generateBarcodesAction, reprintBarcodesAction, searchReprintReceiptsAction } = useBarcodeStore();
  
  // ‡πÇ‡∏´‡∏°‡∏î‡∏´‡∏ô‡πâ‡∏≤: ‡πÅ‡∏™‡∏î‡∏á "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥"
  const [statusFilter, setStatusFilter] = useState('PENDING'); // PENDING | REPRINT

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∏‡∏î (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå)
  const [selectedIds, setSelectedIds] = useState([]);

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô + ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å BE + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const [searchMode, setSearchMode] = useState('RC'); // RC | PO
  const [query, setQuery] = useState('');
  const [reprintResults, setReprintResults] = useState([]);
  const [reprintLoading, setReprintLoading] = useState(false);
  const [reprintError, setReprintError] = useState('');
  const [hasSearched, setHasSearched] = useState(false); // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  const formatDate = (value) => {
    const d = new Date(value);
    return !isNaN(d.getTime()) ? d.toLocaleDateString() : '-';
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å summary ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API (‡∏ù‡∏±‡πà‡∏á PENDING)
  const enhancedReceipts = useMemo(
    () =>
      (receipts || []).map((r) => ({
        ...r,
        orderCode: r.purchaseOrderCode,
        supplierName: r.supplier,
        receivedAt: r.createdAt,
        totalItems: r.total,
        barcodeGenerated: r.scanned,
        printed: !!r.printed,
        status: r.printed ? 'COMPLETED' : 'PENDING',
      })),
    [receipts]
  );

  // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î PENDING
  const filteredReceipts = useMemo(
    () =>
      enhancedReceipts.filter((receipt) => (statusFilter === 'PENDING' ? !receipt.printed : false)),
    [enhancedReceipts, statusFilter]
  );

  const isAllSelected =
    filteredReceipts.length > 0 && filteredReceipts.every((r) => selectedIds.includes(r.id));

  const toggleSelect = (id) =>
    setSelectedIds((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]));

  const toggleSelectAll = () =>
    setSelectedIds(isAllSelected ? [] : filteredReceipts.map((r) => r.id));

  const handlePrintClick = async (receiptId) => {
    await generateBarcodesAction(receiptId);
    navigate(`/pos/purchases/barcodes/preview/${receiptId}`);
  };

  // üîÅ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥: ‡∏î‡∏∂‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà generate ‡πÉ‡∏´‡∏°‡πà) ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ preview
  const handleReprintClick = async (receiptId) => {
    if (!receiptId) return;
    await reprintBarcodesAction(receiptId);
    navigate(`/pos/purchases/barcodes/preview/${receiptId}`);
  };

  const placeholder = useMemo(
    () =>
      (
        {
          RC: '‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏ö (RC-xxxxxx-xxxx) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥',
          PO: '‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (PO-xxxxxx-xxxx) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥',
        }[searchMode]
      ),
    [searchMode]
  );

  // Mask helpers for RC/PO codes: RC-xxxxxx-xxxx / PO-xxxxxx-xxxx
  const maskCode = (mode, raw) => {
    const prefix = mode === 'PO' ? 'PO-' : 'RC-';
    const digits = String(raw || '').replace(/[^0-9]/g, '');
    const p1 = digits.slice(0, 6);
    const p2 = digits.slice(6, 10);
    let out = prefix;
    if (p1) out += p1;
    if (p1.length === 6) out += '-' + p2;
    return out;
  };

  const handleChangeMode = (nextMode) => {
    setSearchMode(nextMode);
    if (!query) return;
    const digits = String(query).replace(/[^0-9]/g, '');
    setQuery(maskCode(nextMode, digits));
  };

  const handleQueryChange = (raw) => {
    setQuery(maskCode(searchMode, raw));
  };

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î REPRINT ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏•‡∏∞ reset hasSearched
  useEffect(() => {
    if (statusFilter === 'REPRINT') {
      setReprintResults([]);
      setReprintError('');
      setHasSearched(false);
    }
  }, [statusFilter]);

  // ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î REPRINT (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å BE ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
  const handleReprintSearch = async (e) => {
    e.preventDefault();
    const q = (query || '').trim();
    if (!q) return; // ‡πÑ‡∏°‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô

    setHasSearched(true);
    setReprintError('');
    setReprintLoading(true);
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Store ‚Üí ‡πÑ‡∏õ BE ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á Store/BE ‡∏£‡∏±‡∏ö param ‡∏ó‡∏±‡πâ‡∏á mode & query)
      const data = await searchReprintReceiptsAction({ mode: searchMode, query: q });

      // ‡∏õ‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      const normalized = (data || []).map((r) => ({
        id: r.id,
        orderCode: r.purchaseOrderCode || r.orderCode || '-',
        code: r.code,
        supplierName: r.supplier || r.supplierName || '-',
        receivedAt: r.createdAt || r.receivedAt,
      }));
      setReprintResults(normalized);
    } catch (err) {
      console.error('[handleReprintSearch] ‚ùå', err);
      setReprintResults([]);
      setReprintError(err?.message || '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    } finally {
      setReprintLoading(false);
    }
  };

  const isSearchDisabled = reprintLoading || !query.trim();

  return (
    <div className="space-y-4">
      <div className="flex flex-wrap items-center gap-4">
        <label className="font-medium">‡πÇ‡∏´‡∏°‡∏î:</label>
        <label>
          <input
            type="radio"
            name="status"
            value="PENDING"
            checked={statusFilter === 'PENDING'}
            onChange={(e) => setStatusFilter(e.target.value)}
          />{' '}
          ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå
        </label>
        <label>
          <input
            type="radio"
            name="status"
            value="REPRINT"
            checked={statusFilter === 'REPRINT'}
            onChange={(e) => setStatusFilter(e.target.value)}
          />{' '}
          ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥
        </label>

        {statusFilter === 'REPRINT' && (
          <form onSubmit={handleReprintSearch} className="flex flex-wrap items-center gap-2 ml-4">
            <select
              className="border rounded px-2 py-1 h-[36px]"
              value={searchMode}
              onChange={(e) => handleChangeMode(e.target.value)}
              aria-label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
            >
              <option value="RC">‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏ö (RC)</option>
              <option value="PO">‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (PO)</option>
            </select>
            <input
              type="text"
              className="border rounded px-3 py-1 h-[36px] min-w-[260px]"
              placeholder={placeholder}
              value={query}
              onChange={(e) => handleQueryChange(e.target.value)}
              onFocus={() => {
                if (!query) setQuery(searchMode === 'PO' ? 'PO-' : 'RC-');
              }}
              maxLength={14}
              inputMode="numeric"
              autoComplete="off"
              autoCapitalize="characters"
              spellCheck={false}
            />
            <button
              type="submit"
              disabled={isSearchDisabled}
              className={`px-3 py-1 text-white rounded ${isSearchDisabled ? 'bg-indigo-400 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700'}`}
            >
              {reprintLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...' : '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'}
            </button>
          </form>
        )}
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå */}
      {statusFilter === 'PENDING' && (
        <div className="overflow-x-auto">
          <table className="min-w-full text-sm border border-gray-300">
            <thead className="bg-gray-100">
              <tr>
                <th className="border px-2 py-1 text-center">
                  <input type="checkbox" onChange={toggleSelectAll} checked={isAllSelected} />
                </th>
                <th className="border px-2 py-1 text-center">‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                <th className="border px-2 py-1">‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</th>
                <th className="border px-2 py-1">‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏ö</th>
                <th className="border px-2 py-1">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ</th>
                <th className="border px-2 py-1">Supplier</th>
                <th className="border px-2 py-1">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö</th>
                <th className="border px-2 py-1 text-center">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö</th>
                <th className="border px-2 py-1 text-center">‡∏¢‡∏¥‡∏á SN ‡πÅ‡∏•‡πâ‡∏ß</th>
                <th className="border px-2 py-1 text-center">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th className="border px-2 py-1 text-center">‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå</th>
              </tr>
            </thead>
            <tbody>
              {filteredReceipts.map((receipt, index) => (
                <tr key={receipt.id} className="hover:bg-gray-50">
                  <td className="border px-2 py-1 text-center">
                    <input
                      type="checkbox"
                      checked={selectedIds.includes(receipt.id)}
                      onChange={() => toggleSelect(receipt.id)}
                    />
                  </td>
                  <td className="border px-2 py-1 text-center">{index + 1}</td>
                  <td className="border px-2 py-1">{receipt.orderCode}</td>
                  <td className="border px-2 py-1">{receipt.code}</td>
                  <td className="border px-2 py-1">{receipt.tax}</td>
                  <td className="border px-2 py-1">{receipt.supplierName}</td>
                  <td className="border px-2 py-1">{formatDate(receipt.receivedAt)}</td>
                  <td className="border px-2 py-1 text-center">{receipt.totalItems}</td>
                  <td className="border px-2 py-1 text-center">{receipt.barcodeGenerated}</td>
                  <td className="border px-2 py-1 text-center">
                    {receipt.status === 'COMPLETED' ? '‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå'}
                  </td>
                  <td className="border px-2 py-1 text-center">
                    <button
                      onClick={() => handlePrintClick(receipt.id)}
                      className="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700"
                    >
                      ‡∏û‡∏¥‡∏°‡∏û‡πå
                    </button>
                  </td>
                </tr>
              ))}
              {filteredReceipts.length === 0 && (
                <tr>
                  <td colSpan={11} className="text-center text-gray-500 p-4">
                    ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥ */}
      {statusFilter === 'REPRINT' && (
        <div className="overflow-x-auto">
          <div className="flex items-center justify-between mb-2">
            <div className="text-sm text-gray-600">
              {hasSearched && !reprintLoading && (
                <>‡∏û‡∏ö {reprintResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</>
              )}
            </div>
            {reprintError && (
              <div className="text-sm text-red-600">{reprintError}</div>
            )}
          </div>
          <table className="min-w-full text-sm border border-gray-300">
            <thead className="bg-gray-100">
              <tr>
                <th className="border px-2 py-1 text-center">‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                <th className="border px-2 py-1">‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</th>
                <th className="border px-2 py-1">‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏ö</th>
                <th className="border px-2 py-1">Supplier</th>
                <th className="border px-2 py-1">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö</th>
                <th className="border px-2 py-1 text-center">‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå</th>
              </tr>
            </thead>
            <tbody>
              {reprintLoading && (
                <tr>
                  <td colSpan={6} className="text-center text-gray-500 p-4">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...</td>
                </tr>
              )}

              {!reprintLoading && reprintResults.length > 0 &&
                reprintResults.map((receipt, index) => (
                  <tr key={receipt.id || `${receipt.code}-${index}`} className="hover:bg-gray-50">
                    <td className="border px-2 py-1 text-center">{index + 1}</td>
                    <td className="border px-2 py-1">{receipt.orderCode}</td>
                    <td className="border px-2 py-1">{receipt.code}</td>
                    <td className="border px-2 py-1">{receipt.supplierName}</td>
                    <td className="border px-2 py-1">{formatDate(receipt.receivedAt)}</td>
                    <td className="border px-2 py-1 text-center">
                      <button
                        onClick={() => handleReprintClick(receipt.id)}
                        disabled={reprintLoading}
                        className={`px-3 py-1 text-white rounded ${reprintLoading ? 'bg-blue-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'}`}
                      >
                        ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥
                      </button>
                    </td>
                  </tr>
                ))}

              {!reprintLoading && hasSearched && reprintResults.length === 0 && (
                <tr>
                  <td colSpan={6} className="text-center text-gray-500 p-4">
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
                  </td>
                </tr>
              )}

              {!reprintLoading && !hasSearched && (
                <tr>
                  <td colSpan={6} className="text-center text-gray-500 p-4">
                    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç RC/PO ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}

      {statusFilter === 'PENDING' && selectedIds.length > 0 && (
        <div className="mt-4">
          <button
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
            onClick={() => navigate(`/pos/purchases/barcodes/print?ids=${selectedIds.join(',')}`)}
          >
            ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ({selectedIds.length})
          </button>
        </div>
      )}
    </div>
  );
};

export default BarcodePrintTable;
