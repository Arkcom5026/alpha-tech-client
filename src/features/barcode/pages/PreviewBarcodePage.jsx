// src/pages/pos/barcode/PreviewBarcodePage.jsx

import React, { useState, useCallback } from 'react';
import { useParams } from 'react-router-dom';
import useBarcodeStore from '@/features/barcode/store/barcodeStore';
import BarcodeWithQRRenderer from '@/components/shared/barcode/BarcodeWithQRRenderer';
import usePurchaseOrderReceiptStore from '@/features/purchaseOrderReceipt/store/purchaseOrderReceiptStore';

const PreviewBarcodePage = () => {
  const { receiptId } = useParams();
  const { barcodes, loadBarcodesAction, markBarcodeAsPrintedAction  } = useBarcodeStore();
  const {markReceiptAsPrintedAction  } = usePurchaseOrderReceiptStore();

  const [loading, setLoading] = useState(false);
  const [loaded, setLoaded] = useState(false);

  const [columns, setColumns] = useState(6);
  const [barcodeHeight, setBarcodeHeight] = useState(30);
  const [barcodeWidth, setBarcodeWidth] = useState(0.8);

  const handleLoadBarcodes = useCallback(async () => {
    if (!receiptId || loading || loaded) return;

    setLoading(true);
    await loadBarcodesAction(receiptId);
    setLoading(false);
    setLoaded(true);
  }, [receiptId, loading, loaded, loadBarcodesAction]);

  const handlePrint = async () => {
    try {
      if (!receiptId || barcodes.length === 0) return;

      const hasUnprinted = barcodes.some((b) => !b.printed);

      if (hasUnprinted) {
        console.log('[üì¶] Updating printed status for purchaseOrderReceiptId:', receiptId);
        await markBarcodeAsPrintedAction({ purchaseOrderReceiptId: receiptId });
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô COMPLETE ‡∏´‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå ‡∏ú‡πà‡∏≤‡∏ô Store
      await markReceiptAsPrintedAction(receiptId);

      window.print();
    } catch (error) {
      console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ printed ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    }
  };

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-xl font-bold print:hidden">‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î</h1>

      <div className="flex gap-4 items-center print:hidden">
        <button
          onClick={handleLoadBarcodes}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...' : '‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î'}
        </button>

        <button
          onClick={handlePrint}
          className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
          disabled={!loaded || barcodes.length === 0}
        >
          ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
        </button>

        <label className="flex items-center gap-2">
          ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á:
          <input
            type="number"
            value={barcodeHeight}
            onChange={(e) => setBarcodeHeight(Number(e.target.value))}
            className="w-20 border rounded px-2 py-1"
          />
        </label>
        <label className="flex items-center gap-2">
          ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô:
          <input
            type="number"
            value={barcodeWidth}
            onChange={(e) => setBarcodeWidth(Number(e.target.value))}
            className="w-20 border rounded px-2 py-1"
            min={0.5}
            max={10}
            step={0.1}
          />
        </label>

        <label className="flex items-center gap-2">
          ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:
          <input
            type="number"
            value={columns}
            onChange={(e) => setColumns(Number(e.target.value))}
            className="w-20 border rounded px-2 py-1"
          />
        </label>
      </div>

      {!loaded ? (
        <p className="text-gray-500 mt-4 print:hidden">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
      ) : barcodes.length === 0 ? (
        <p className="text-red-500 mt-4 print:hidden">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ</p>
      ) : (
        <div
          className="grid gap-4 mt-6 print-area"
          style={{
            gridTemplateColumns: `repeat(${columns}, minmax(0, 1fr))`,
          }}
        >
          {barcodes.map((item) => {
            const product = item?.product;
            return (
              <div
                key={item.barcode || item.id}
                className="border p-2 rounded-xl shadow text-center"
              >
                <BarcodeWithQRRenderer
                  barcodeValue={item.barcode}
                  qrValue={item.barcode}
                  productName={product?.name || '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö'}
                  barcodeHeight={barcodeHeight}
                  barcodeWidth={barcodeWidth}
                />
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};

export default PreviewBarcodePage;
