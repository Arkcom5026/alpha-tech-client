// üìÑ ManageBranchPricePage.jsx
import React, { useEffect, useState } from 'react';

import useBranchPriceStore from '../store/branchPriceStore';

import CascadingFilterGroup from '@/components/shared/form/CascadingFilterGroup';
import useProductStore from '@/features/product/store/productStore';
import BranchPriceEditTable from '../components/BranchPriceEditTable.jsx';
import BranchPriceReadyTable from '../components/BranchPriceReadyTable.jsx';

const ManageBranchPricePage = () => {
  const {
    allProductsWithPrice,
    loading,
    error,
    fetchAllProductsWithPriceByTokenAction,
    updateMultipleBranchPricesAction,
  } = useBranchPriceStore();

  const {
    dropdowns,
    ensureDropdownsAction,
  } = useProductStore();


  // ensure dropdowns are loaded once on mount
  useEffect(() => {
    ensureDropdownsAction();
  }, [ensureDropdownsAction]);

  const [filter, setFilter] = useState({
    categoryId: '',
    productTypeId: '',
    productProfileId: '',
    productTemplateId: '',
    searchText: '',
  });

  const [committedSearchText, setCommittedSearchText] = useState('');

  const [editablePrices, setEditablePrices] = useState({});
  const [pendingList, setPendingList] = useState([]);
  const [filteredEntries, setFilteredEntries] = useState([]);

  // ‡πÉ‡∏ä‡πâ id ‡πÉ‡∏´‡πâ‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏ó‡∏±‡πâ‡∏á object ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ product ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏ô root
  const pid = (x) => Number(x?.product?.id ?? x?.id);

  useEffect(() => {
    setFilteredEntries(allProductsWithPrice ?? []);
  }, [allProductsWithPrice]);


  // (removed) ‡∏î‡∏∂‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö useEffect ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö filter + committedSearchText

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ filter ‡∏´‡∏£‡∏∑‡∏≠ committedSearchText ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    fetchAllProductsWithPriceByTokenAction({
      categoryId: filter.categoryId || undefined,
      productTypeId: filter.productTypeId || undefined,
      productProfileId: filter.productProfileId || undefined,
      productTemplateId: filter.productTemplateId || undefined,
      searchText: committedSearchText?.trim() || undefined,
    });
  }, [filter.categoryId, filter.productTypeId, filter.productProfileId, filter.productTemplateId, committedSearchText, fetchAllProductsWithPriceByTokenAction]);

  const handleConfirmOne = (productId, newEntry) => {
    console.log('‚úÖ handleConfirmOne: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á pendingList ‚Üí', newEntry);
    setPendingList((prev) => {
      const id = Number(productId);
      const exists = prev.some((it) => pid(it) === id);
      return exists ? prev.map((it) => (pid(it) === id ? newEntry : it)) : [...prev, newEntry];
    });

    setEditablePrices((prev) => {
      const next = { ...prev };
      delete next[productId];
      console.log('üßπ handleConfirmOne: ‡∏•‡∏ö editablePrices ‡∏Ç‡∏≠‡∏á productId ‚Üí', productId);
      return next;
    });

    setFilteredEntries((prev) => prev.filter((p) => pid(p) !== Number(productId)));
  };

  const handleRemoveOne = (productId) => {
    console.log('‚ùå handleRemoveOne: ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å pendingList ‚Üí', productId);
    setPendingList((prev) => prev.filter((item) => pid(item) !== Number(productId)));
  };

  const handleSaveAll = async () => {
    if (pendingList.length > 0) {
      try {
        const updates = pendingList.map((item) => ({
          productId: item.product?.id || item.id,
          costPrice: item.costPrice,
          retailPrice: item.retailPrice,
          wholesalePrice: item.wholesalePrice,
          technicianPrice: item.technicianPrice,
          priceOnline: item.priceOnline,
        }));

        console.log('üìÇ handleSaveAll: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‚Üí', updates);

        await updateMultipleBranchPricesAction(updates);
        console.log('‚úÖ handleSaveAll: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡πâ‡∏≤‡∏á pendingList ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î');

        setPendingList([]);
        fetchAllProductsWithPriceByTokenAction({
          categoryId: filter.categoryId || undefined,
          productTypeId: filter.productTypeId || undefined,
          productProfileId: filter.productProfileId || undefined,
          productTemplateId: filter.productTemplateId || undefined,
          searchText: committedSearchText?.trim() || undefined,
        });
      } catch (error) {
        console.error('‚ùå Error updating prices:', error);
      }
    }
  };

  return (
    <div className="p-2 max-w-screen-xl mx-auto">
      <h1 className="text-xl font-semibold mb-3">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ</h1>

      <div className='p-2'>
        <CascadingFilterGroup
          value={filter}
          onChange={(next) => {
            setFilter(next);
            setCommittedSearchText('');
          }}
          dropdowns={dropdowns}
          showSearch
          searchText={filter.searchText}
          onSearchTextChange={(text) => setFilter({ ...filter, searchText: text })}
          onSearchCommit={(text) => setCommittedSearchText(text)}
        />
      </div>

      {loading && <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>}
      {error && <p className="text-red-500">{error}</p>}

      {!loading && ((allProductsWithPrice?.length ?? 0) === 0) && (
        <p className="text-gray-500">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á</p>
      )}

      <div className="space-y-8">
        <div>
          <BranchPriceEditTable
            entries={filteredEntries}
            editablePrices={editablePrices}
            setEditablePrices={setEditablePrices}
            onConfirm={handleConfirmOne}
          />
        </div>

        <div>
          <h2 className="text-lg font-semibold mb-2">üîµ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</h2>
          <BranchPriceReadyTable
            readyEntries={pendingList}
            onRemove={handleRemoveOne}
          />
          <div className="flex justify-end mt-3">
            <button className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-60 disabled:cursor-not-allowed"
              onClick={handleSaveAll}
              disabled={!pendingList.length}
            >
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ManageBranchPricePage;



