// src/features/product/components/FormFields.jsx

import { useFormContext } from 'react-hook-form';
import { useEffect } from 'react';
import CascadingDropdownGroup from '@/components/shared/form/CascadingDropdownGroup';

export default function FormFields({ register, errors, dropdowns, control, setValue, isEditMode = false }) {
  const { watch } = useFormContext();

  const categoryId = watch('categoryId');
  const productTypeId = watch('productTypeId');
  const productProfileId = watch('productProfileId');
  const templateId = watch('templateId');

  // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‚Üí ‡∏ñ‡πâ‡∏≤ type/profile/template ‡πÑ‡∏°‡πà‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå ‚Üí ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
  useEffect(() => {
    const validTypes = dropdowns.productTypes.filter(pt => pt.categoryId === Number(categoryId)).map(pt => String(pt.id));
    if (!validTypes.includes(String(productTypeId))) {
      setValue('productTypeId', '');
      setValue('productProfileId', '');
      setValue('templateId', '');
    }
  }, [categoryId]);

  useEffect(() => {
    const validProfiles = dropdowns.productProfiles.filter(pf => pf.productTypeId === Number(productTypeId)).map(pf => String(pf.id));
    if (!validProfiles.includes(String(productProfileId))) {
      setValue('productProfileId', '');
      setValue('templateId', '');
    }
  }, [productTypeId]);

  useEffect(() => {
    const validTemplates = dropdowns.templates.filter(t => t.productProfileId === Number(productProfileId)).map(t => String(t.id));
    if (!validTemplates.includes(String(templateId))) {
      setValue('templateId', '');
    }
  }, [productProfileId]);

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      <CascadingDropdownGroup
        control={control}
        register={register}
        errors={errors}
        setValue={setValue}
        dropdowns={dropdowns}
        isEditMode={isEditMode}
        onSelectionChange={(data) => console.log('üß© selection changed:', data)}
      />

      <div>
        <label className="block font-medium mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</label>
        <input
          type="text"
          {...register('title', { required: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' })}
          className="w-full p-2 border rounded"
        />
        {errors.title && <p className="text-red-500 text-sm">{errors.title.message}</p>}
      </div>

      <div>
        <label className="block font-medium mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</label>
        <textarea
          {...register('description')}
          className="w-full p-2 border rounded"
        />
      </div>

      <div>
        <label className="block font-medium mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡πÄ‡∏õ‡∏Å</label>
        <textarea
          {...register('spec')}
          className="w-full p-2 border rounded"
        />
      </div>

      <div>
        <label className="block font-medium mb-1">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)</label>
        <input
          type="number"
          {...register('warranty', { valueAsNumber: true })}
          className="w-full p-2 border rounded"
        />
      </div>

      <div className="flex items-center space-x-2">
        <input type="checkbox" {...register('noSN')} id="noSN" />
        <label htmlFor="noSN">‡πÑ‡∏°‡πà‡∏°‡∏µ Serial Number</label>
      </div>

      <div>
        <label className="block font-medium mb-1">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î</label>
        <select
          {...register('codeType')}
          className="w-full p-2 border rounded"
        >
          <option value="D">D - Default</option>
          <option value="S">S - Serial-based</option>
        </select>
      </div>

      <div className="flex items-center space-x-2">
        <input type="checkbox" {...register('active')} id="active" defaultChecked />
        <label htmlFor="active">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</label>
      </div>

      <div>
        <label className="block font-medium mb-1">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏ô</label>
        <input
          type="number"
          step="0.01"
          {...register('cost', { valueAsNumber: true })}
          className="w-full p-2 border rounded"
        />
      </div>

      <div>
        <label className="block font-medium mb-1">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</label>
        <input
          type="number"
          {...register('quantity', { valueAsNumber: true })}
          className="w-full p-2 border rounded"
        />
      </div>

      <div>
        <label className="block font-medium mb-1">‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö</label>
        <select
          {...register('unitId')}
          className="w-full p-2 border rounded"
        >
          <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö --</option>
          {dropdowns.units.map((unit) => (
            <option key={unit.id} value={unit.id}>
              {unit.name}
            </option>
          ))}
        </select>
      </div>

      <div>
        <label className="block font-medium mb-1">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏õ‡∏•‡∏µ‡∏Å (‡∏£‡∏∞‡∏î‡∏±‡∏ö 1)</label>
        <input
          type="number"
          step="0.01"
          {...register('priceLevel1', { valueAsNumber: true })}
          className="w-full p-2 border rounded"
        />
      </div>

      <div>
        <label className="block font-medium mb-1">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡πà‡∏á (‡∏£‡∏∞‡∏î‡∏±‡∏ö 2)</label>
        <input
          type="number"
          step="0.01"
          {...register('priceLevel2', { valueAsNumber: true })}
          className="w-full p-2 border rounded"
        />
      </div>
    </div>
  );
}
