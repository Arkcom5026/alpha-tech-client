// ‚úÖ purchaseOrderStore.js (updated to align with current Form usage + store naming standard)
import { create } from 'zustand';
import { getProducts } from '@/features/product/api/productApi';
import {
  createPurchaseOrder,
  createPurchaseOrderWithAdvance,
  deletePurchaseOrder,
  getEligiblePurchaseOrders,
  getPurchaseOrderById,
  getPurchaseOrders,
  updatePurchaseOrder,
  updatePurchaseOrderStatus,
  getPurchaseOrdersBySupplier,
} from '../api/purchaseOrderApi';

import { useBranchStore } from '@/features/branch/store/branchStore';

const usePurchaseOrderStore = create((set, get) => ({
  // --- State ---
  purchaseOrders: [],
  selectedPO: null,
  // üîÅ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏û‡∏±‡∏á (alias ‡∏Ç‡∏≠‡∏á selectedPO)
  purchaseOrder: null,

  productList: [],
  eligiblePOs: [],
  suppliers: [],
  loading: false,
  error: null,

  // --- Actions (‡∏Ñ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠ backwards-compatibility ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Action-suffix ‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏Ç‡πâ‡∏≠ 64) ---

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö search ‡πÅ‡∏•‡∏∞ status filter
  fetchAllPurchaseOrders: async ({ search = '', status = 'pending,partially_received' } = {}) => {
    const branchId = useBranchStore.getState().selectedBranchId;
    if (!branchId) return;
    set({ loading: true });
    try {
      const data = await getPurchaseOrders({ search, status, branchId });
      set({ purchaseOrders: data, loading: false });
    } catch (err) {
      console.error('‚ùå fetchAllPurchaseOrders error:', err);
      set({ error: err, loading: false });
    }
  },
  fetchAllPurchaseOrdersAction: async (args) => get().fetchAllPurchaseOrders(args),

  fetchEligiblePurchaseOrders: async () => {
    const branchId = useBranchStore.getState().selectedBranchId;
    if (!branchId) return;
    set({ loading: true });
    try {
      const data = await getEligiblePurchaseOrders(branchId);
      set({ eligiblePOs: data, loading: false });
    } catch (err) {
      console.error('‚ùå fetchEligiblePurchaseOrders error:', err);
      set({ error: err, loading: false });
    }
  },
  fetchEligiblePurchaseOrdersAction: async () => get().fetchEligiblePurchaseOrders(),

  fetchPurchaseOrderById: async (id) => {
    set({ loading: true });
    try {
      const data = await getPurchaseOrderById(id);
      set({ selectedPO: data, purchaseOrder: data, loading: false });
      return data;
    } catch (err) {
      console.error('‚ùå fetchPurchaseOrderById error:', err);
      set({ error: err, loading: false });
    }
  },
  fetchPurchaseOrderByIdAction: async (id) => get().fetchPurchaseOrderById(id),

  loadOrderById: async (id) => {
    try {
      const data = await getPurchaseOrderById(id);
      set({ selectedPO: data, purchaseOrder: data });
      return data;
    } catch (err) {
      console.error('‚ùå loadOrderById error:', err);
      throw err;
    }
  },
  loadOrderByIdAction: async (id) => get().loadOrderById(id),

  createPurchaseOrder: async (poData) => {
    try {
      const newPO = await createPurchaseOrder(poData);
      set((state) => ({ purchaseOrders: [newPO, ...state.purchaseOrders] }));
      return newPO;
    } catch (err) {
      console.error('‚ùå createPurchaseOrder error:', err);
      throw err;
    }
  },
  createPurchaseOrderAction: async (poData) => get().createPurchaseOrder(poData),

  createPurchaseOrderWithAdvance: async (poData) => {
    try {
      const newPO = await createPurchaseOrderWithAdvance(poData);
      set((state) => ({ purchaseOrders: [newPO, ...state.purchaseOrders] }));
      return newPO;
    } catch (err) {
      console.error('‚ùå createPurchaseOrderWithAdvance error:', err);
      throw err;
    }
  },
  createPurchaseOrderWithAdvanceAction: async (poData) => get().createPurchaseOrderWithAdvance(poData),

  updatePurchaseOrder: async (id, poData) => {
    try {
      const updated = await updatePurchaseOrder(id, poData);
      set((state) => ({
        purchaseOrders: state.purchaseOrders.map((po) => (po.id === id ? updated : po)),
        selectedPO: updated,
        purchaseOrder: updated,
      }));
      return updated;
    } catch (err) {
      console.error('‚ùå updatePurchaseOrder error:', err);
      throw err;
    }
  },
  updatePurchaseOrderAction: async (id, poData) => get().updatePurchaseOrder(id, poData),

  updatePurchaseOrderStatusAction: async ({ id, status }) => {
    try {
      const updated = await updatePurchaseOrderStatus({ id, status });
      set((state) => ({
        purchaseOrders: state.purchaseOrders.map((po) => (po.id === id ? updated : po)),
        selectedPO: state.selectedPO?.id === id ? updated : state.selectedPO,
        purchaseOrder: state.purchaseOrder?.id === id ? updated : state.purchaseOrder,
      }));
      return updated;
    } catch (err) {
      console.error('‚ùå updatePurchaseOrderStatusAction error:', err);
      throw err;
    }
  },

  removePurchaseOrder: async (id) => {
    try {
      await deletePurchaseOrder(id);
      set((state) => ({
        purchaseOrders: state.purchaseOrders.filter((po) => po.id !== id),
        // ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå selection
        selectedPO: state.selectedPO?.id === id ? null : state.selectedPO,
        purchaseOrder: state.purchaseOrder?.id === id ? null : state.purchaseOrder,
      }));
    } catch (err) {
      console.error('‚ùå removePurchaseOrder error:', err);
      throw err;
    }
  },
  removePurchaseOrderAction: async (id) => get().removePurchaseOrder(id),

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô modal ‡∏´‡∏£‡∏∑‡∏≠ form ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PO)
  loadProductsPurchaseOrder: async ({ search, status, limit = 50, page = 1 } = {}) => {
    try {
      const data = await getProducts({ search, status, limit, page });
      set({ productList: data });
    } catch (err) {
      console.error('‚ùå loadProductsPurchaseOrder error:', err);
      set({ error: err });
    }
  },
  loadProductsPurchaseOrderAction: async (args) => get().loadProductsPurchaseOrder(args),

  // ‚úÖ ‡∏î‡∏∂‡∏á PO ‡∏ï‡∏≤‡∏° supplierId (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô SupplierPaymentTabs)
  fetchPurchaseOrdersBySupplierAction: async (supplierId) => {
    set({ loading: true });
    try {
      const data = await getPurchaseOrdersBySupplier(supplierId);
      // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ PO ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö
      const unpaidPOs = data.filter(
        (po) => po.paymentStatus !== 'PAID' && po.paymentStatus !== 'CANCELLED'
      );
      set({ purchaseOrders: unpaidPOs, loading: false });
    } catch (err) {
      console.error('‚ùå fetchPurchaseOrdersBySupplierAction error:', err);
      set({ error: err, loading: false });
    }
  },
}));

export default usePurchaseOrderStore;
