// CustomerSection component
import React, { useEffect, useRef, useState, useMemo } from 'react';
import InputMask from 'react-input-mask';
import useSalesStore from '@/features/sales/store/salesStore';
import useCustomerDepositStore from '@/features/customerDeposit/store/customerDepositStore';
import useCustomerStore from '@/features/customer/store/customerStore';

const CustomerSection = ({ productSearchRef, clearTrigger, hideCustomerDetails }) => {
  const [phone, setPhone] = useState('');
  const [rawPhone, setRawPhone] = useState('');
  const [searchMode, setSearchMode] = useState('phone');
  const [nameSearch, setNameSearch] = useState('');
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [address, setAddress] = useState('');
  const [customerType, setCustomerType] = useState('‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ');
  const [companyName, setCompanyName] = useState('');
  const [taxId, setTaxId] = useState('');
  const [customerLoading, setCustomerLoading] = useState(false);
  const [formError, setFormError] = useState('');
  const [pendingPhone, setPendingPhone] = useState(false);
  const [isModified, setIsModified] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [selectedCustomer, setSelectedCustomer] = useState(null);
  const [clearKey, setClearKey] = useState(Date.now());
  const [isClearing, setIsClearing] = useState(false);
  const [_shouldShowDetails, _setShouldShowDetails] = useState(false);
  const phoneInputRef = useRef(null);

  const setShouldShowDetails = (val) => {
    console.log('üõ†Ô∏è setShouldShowDetails:', val);
    _setShouldShowDetails(val);
  };

  const {
    setCustomerDepositAmount,
    searchCustomerByPhoneAndDepositAction,
    searchCustomerByNameAndDepositAction,
    setSelectedDeposit,
    clearCustomerAndDeposit,
  } = useCustomerDepositStore();

  const {
    updateCustomerProfileAction,
    createCustomerAction
  } = useCustomerStore();

  const { setCustomerIdAction } = useSalesStore();

  const shouldShowCustomerDetails = useMemo(() => {
    const result = (!isClearing && (_shouldShowDetails || pendingPhone));
  
    console.log('üßÆ [COMPUTE] shouldShowCustomerDetails (no hide flag):', result);
    return result;
  }, [selectedCustomer, isClearing, _shouldShowDetails]);


  useEffect(() => {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î focus ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    const timer = setTimeout(() => {
      phoneInputRef.current?.focus();
    }, 300);
    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (clearTrigger) {
      console.log('üßπ [CLEAR_TRIGGER] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
      setIsClearing(true); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      setClearKey(Date.now()); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö InputMask ‡πÉ‡∏´‡πâ rerender
      // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ State ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      setPhone('');
      setRawPhone('');
      setName('');
      setEmail('');
      setAddress('');
      setCompanyName('');
      setTaxId('');
      setCustomerType('‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ');
      setNameSearch('');
      setSearchResults([]);
      setSelectedCustomer(null);
      setCustomerDepositAmount(0);
      setSelectedDeposit(null);
      setIsModified(false);
      setFormError('');
      setPendingPhone(false);
      setCustomerIdAction(null);
      clearCustomerAndDeposit();
      setShouldShowDetails(false); // ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      const delay = setTimeout(() => {
        phoneInputRef.current?.focus(); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î focus ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
        phoneInputRef.current?.select(); // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á
        console.log('üéØ [CLEAR_TRIGGER] Focus ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡πâ‡∏ß');
        setIsClearing(false); // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      }, 300);
      return () => clearTimeout(delay);
    }
  }, [clearTrigger]);

  useEffect(() => {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
    if (selectedCustomer && !isClearing) {
      console.log('üì≤ [SET_PHONE] ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå:', selectedCustomer.phone);
      setPhone(selectedCustomer.phone);
      setName(selectedCustomer.name || '');
      setEmail(selectedCustomer.email || '');
    }
  }, [selectedCustomer, isClearing]);

  useEffect(() => {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    if (selectedCustomer && Object.keys(selectedCustomer).length > 0 && !isClearing) {
      console.log('üëÅÔ∏è [SET_DETAIL_TRUE] ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
      setShouldShowDetails(true);
    }
  }, [selectedCustomer, isClearing]);

  useEffect(() => {
    // Debugging logs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    console.log('üîç [TRACE] selectedCustomer:', selectedCustomer);
    console.log('üîç [TRACE] shouldShowCustomerDetails:', shouldShowCustomerDetails);
    console.log('üîç [TRACE] shouldShowDetails (raw):', _shouldShowDetails);
    console.log('üîç [TRACE] hideCustomerDetails (ignored):', hideCustomerDetails);
    console.log('üîç [TRACE] isClearing:', isClearing);
    console.log('üîç [TRACE] phone:', phone);
    console.log('üîç [TRACE] name:', name);
    console.log('üîç [TRACE] email:', email);
  }, [selectedCustomer, shouldShowCustomerDetails, _shouldShowDetails, hideCustomerDetails, isClearing, phone, name, email]);

  const handleVerifyCustomer = async () => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    setFormError(''); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡∏Å‡πà‡∏≠‡∏ô
    try {
      setCustomerLoading(true); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
      setSelectedCustomer(null); // ‡∏•‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      if (searchMode === 'phone') {
        const cleanPhone = phone.replace(/-/g, ''); // ‡∏•‡∏ö‡∏Ç‡∏µ‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        if (!/^[0-9]{10}$/.test(cleanPhone)) {
          setFormError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (10 ‡∏´‡∏•‡∏±‡∏Å)'); // ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          return;
        }
        setRawPhone(cleanPhone); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏µ‡∏î
        const found = await searchCustomerByPhoneAndDepositAction(cleanPhone); // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        if (found) {
          setSelectedCustomer(found); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö
          setCustomerIdAction(found.id); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ID ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô Sales Store
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö
          setName(found.name || '');
          setEmail(found.email || '');
          setAddress(found.address || '');
          setCustomerType(found.customerType || '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ');
          setCompanyName(found.companyName || '');
          setTaxId(found.taxId || '');
          setIsModified(false); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          setIsClearing(false); // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          setTimeout(() => {
            productSearchRef?.current?.focus(); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î focus ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          }, 100);
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
          setPendingPhone(true); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
          setShouldShowDetails(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
          setName(''); // ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠
          setEmail(''); // ‡∏•‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
          setAddress(''); // ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
          setCompanyName('');
          setTaxId('');
          setCustomerType('‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ');
          setTimeout(() => {
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î focus ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            const nameInput = document.getElementById('customer-name-input');
            if (nameInput) nameInput.focus();
          }, 100);
        }
        setSearchResults([]); // ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠
      } else {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠
        if (!nameSearch.trim()) {
          setFormError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'); // ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
          return;
        }
        const result = await searchCustomerByNameAndDepositAction(nameSearch); // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠
        if (result) {
          setSearchResults([result]); // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        } else {
          setSearchResults([]); // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          setFormError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ'); // ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
        }
      }
    } catch (error) {
      console.error('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error);
      setFormError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'); // ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    } finally {
      setCustomerLoading(false); // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
    }
  };


  const handleSelectCustomer = (customer) => {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠
    setSelectedCustomer(customer);
    setCustomerIdAction(customer.id);
    setName(customer.name || '');
    setEmail(customer.email || '');
    setAddress(customer.address || '');
    setCustomerType(customer.customerType || '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ');
    setCompanyName(customer.companyName || '');
    setTaxId(customer.taxId || '');
    setPendingPhone(true); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    setSearchResults([]); // ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    setShouldShowDetails(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    setTimeout(() => {
      productSearchRef?.current?.focus(); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î focus ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    }, 100);
  };

  const handleUpdateCustomer = async () => {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    try {
      if (!selectedCustomer?.id) return; // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      await updateCustomerProfileAction({
        id: selectedCustomer.id,
        name,
        email,
        address,
        customerType,
        companyName,
        taxId,
      });
      setIsModified(false); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      alert('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    } catch (error) {
      console.error('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error);
      alert('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    }
  };

  const handleConfirmCreateCustomer = async () => {
    // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
    setFormError('');
    if (!name.trim()) {
      setFormError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
      return;
    }
    try {
      const newCustomer = await createCustomerAction({
        name,
        phone: rawPhone,
        email,
        address,
        customerType,
        companyName,
        taxId,
      });
      if (newCustomer?.id) {
        setSelectedCustomer(newCustomer);
        setCustomerIdAction(newCustomer.id);
        alert('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        setShouldShowDetails(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        setTimeout(() => {
          productSearchRef?.current?.focus(); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î focus ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        }, 100);
      }
    } catch (error) {
      console.error('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error);
      setFormError('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + (error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'));
    }
  };


  const handleCancelCreateCustomer = () => {
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
    setSelectedCustomer(null);
    setCustomerIdAction(null);
    setPhone('');
    setRawPhone('');
    setName('');
    setEmail('');
    setAddress('');
    setCompanyName('');
    setTaxId('');
    setCustomerType('‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ');
    setFormError('');
    setIsModified(false);
    setPendingPhone(false);
    setShouldShowDetails(false); // ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    phoneInputRef.current?.focus(); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î focus ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
  };

  return (
    <div className="bg-white p-4 rounded-xl shadow min-w-[390px]">
      <h2 className="text-xl font-bold text-gray-800 mb-4">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h2>
      <div className="flex gap-4 py-2 mb-4">
        <label className="flex items-center space-x-2 text-gray-700">
          <input
            type="radio"
            name="searchMode"
            checked={searchMode === 'name'}
            onChange={() => setSearchMode('name')}
            className="form-radio text-blue-600"
          />
          <span>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠</span>
        </label>
        <label className="flex items-center space-x-2 text-gray-700">
          <input
            type="radio"
            name="searchMode"
            checked={searchMode === 'phone'}
            onChange={() => setSearchMode('phone')}
            className="form-radio text-blue-600"
          />
          <span>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</span>
        </label>
      </div>

      <div className="flex flex-col md:flex-row items-start md:items-center gap-3 md:gap-4 mb-4">
        {searchMode === 'phone' ? (
          <InputMask
            key={clearKey}
            mask="099-999-9999"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && handleVerifyCustomer()}
          >
            {(inputProps) => (
              <input
                {...inputProps}
                ref={phoneInputRef}
                id="customer-phone-input" // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Focus
                type="tel"
                placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (0xx-xxx-xxxx)"
                className="border border-gray-300 rounded-md px-3 py-2 w-full text-gray-800 text-lg focus:ring-2 focus:ring-blue-500 shadow-sm"
              />
            )}
          </InputMask>
        ) : (
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
            value={nameSearch}
            onChange={(e) => setNameSearch(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && handleVerifyCustomer()}
            className="border border-gray-300 rounded-md px-3 py-2 w-full text-gray-800 text-base focus:ring-2 focus:ring-blue-500 shadow-sm"
          />
        )}
        <button
          onClick={handleVerifyCustomer}
          disabled={
            (searchMode === 'phone' && !phone) ||
            (searchMode === 'name' && !nameSearch.trim()) ||
            customerLoading
          }
          className="w-full md:w-auto px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed text-lg shadow-md flex items-center justify-center"
        >
          {customerLoading ? (
            <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          ) : (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 002 8z" clipRule="evenodd" />
              </svg>
              ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            </>
          )}
        </button>
      </div>

      {formError && (
        <p className="text-red-600 text-sm mt-2 p-2 bg-red-100 rounded-md border border-red-200">{formError}</p>
      )}

      {searchMode === 'name' && searchResults.length > 0 && (
        <div className="mt-4 border border-gray-300 rounded-md p-3 bg-gray-50 shadow-sm">
          <p className="font-semibold mb-2 text-gray-800">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:</p>
          <ul className="space-y-1">
            {searchResults.map((cust) => (
              <button
                key={cust.id}
                onClick={() => handleSelectCustomer(cust)}
                className="block w-full text-left px-4 py-2 border-b border-gray-200 last:border-b-0 text-gray-700 hover:bg-blue-100 rounded-sm transition-colors duration-200"
              >
                {cust.name} ({cust.phone})
              </button>
            ))}
          </ul>
        </div>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà */}
      {shouldShowCustomerDetails && !hideCustomerDetails && (
        <div className="mt-4 text-lg text-gray-800 bg-blue-50 border border-blue-200 rounded-xl p-4 space-y-3 shadow-md">
          <p className="font-bold text-blue-800 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h10a2 2 0 002-2V8m-2 0V5a2 2 0 00-2-2H9a2 2 0 00-2 2v3m-2 0h7m-5 0h5M6 12h9M6 16h9" />
            </svg>
            ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
          </p>

          {searchMode === 'phone' && !selectedCustomer?.id && pendingPhone && (
            <p className="text-orange-700 bg-orange-100 p-2 rounded-md border border-orange-200">
              ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå: <strong>{phone}</strong> ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
            </p>
          )}

          <div className="grid grid-cols-1 gap-3 md:grid-cols-2">
            <div className="col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</label>
              <div className="flex gap-4 text-sm text-gray-800">
                <label className="flex items-center space-x-2">
                  <input
                    type="radio"
                    name="customerType"
                    value="‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
                    className="form-radio text-blue-600"
                    checked={customerType === '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'}
                    onChange={() => setCustomerType('‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ')}
                  />
                  <span>‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</span>
                </label>
                <label className="flex items-center space-x-2">
                  <input
                    type="radio"
                    name="customerType"
                    value="‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•"
                    className="form-radio text-blue-600"
                    checked={customerType === '‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•'}
                    onChange={() => setCustomerType('‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•')}
                  />
                  <span>‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</span>
                </label>
              </div>
            </div>

            {customerType === '‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•' && (
              <>
                <input
                  type="text"
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"
                  value={companyName}
                  onChange={(e) => { setCompanyName(e.target.value); setIsModified(true); }}
                  className="border border-gray-300 px-3 py-2 rounded-md col-span-2 text-gray-800 text-base focus:ring-2 focus:ring-blue-500 shadow-sm"
                />
                <input
                  type="text"
                  placeholder="‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
                  value={taxId}
                  onChange={(e) => { setTaxId(e.target.value); setIsModified(true); }}
                  className="border border-gray-300 px-3 py-2 rounded-md col-span-2 text-gray-800 text-base focus:ring-2 focus:ring-blue-500 shadow-sm"
                />
              </>
            )}

            <input
              type="text"
              id="customer-name-input" // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Focus
              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
              value={name}
              onChange={(e) => { setName(e.target.value); setIsModified(true); }}
              className="border border-gray-300 px-3 py-2 rounded-md col-span-2 text-gray-800 text-base focus:ring-2 focus:ring-blue-500 shadow-sm"
            />

            <input
              type="email"
              placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
              value={email}
              onChange={(e) => { setEmail(e.target.value); setIsModified(true); }}
              className="border border-gray-300 px-3 py-2 rounded-md col-span-2 text-gray-800 text-base focus:ring-2 focus:ring-blue-500 shadow-sm"
            />

            {!email && (
              <p className="text-sm text-gray-500 italic col-span-2">
                * ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
              </p>
            )}

            <textarea
              placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
              value={address}
              onChange={(e) => { setAddress(e.target.value); setIsModified(true); }}
              className="border border-gray-300 px-3 py-2 rounded-md col-span-2 text-gray-800 text-base focus:ring-2 focus:ring-blue-500 shadow-sm min-h-[80px]"
            />
          </div>

          <div className="pt-2 flex gap-3 justify-end">
            {selectedCustomer ? (
              <button
                onClick={handleUpdateCustomer}
                disabled={!isModified}
                className={`px-5 py-2 rounded-md text-white font-semibold transition-colors duration-200 shadow-md ${isModified ? 'bg-blue-600 hover:bg-blue-700' : 'bg-gray-400 cursor-not-allowed'}`}
              >
                <span className="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.38-2.827-2.828z" />
                  </svg>
                  ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                </span>
              </button>
            ) : (
              searchMode === 'phone' && pendingPhone && (
                <div className="flex gap-3">
                  <button
                    onClick={handleConfirmCreateCustomer}
                    className="px-5 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 font-semibold transition-colors duration-200 shadow-md flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clipRule="evenodd" />
                    </svg>
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
                  </button>
                  <button
                    onClick={handleCancelCreateCustomer}
                    className="px-5 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 font-semibold transition-colors duration-200 shadow-md flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M9.707 10l-4.146 4.146a1 1 0 001.414 1.414L11.414 11l4.146 4.146a1 1 0 001.414-1.414L12.828 10l4.146-4.146a1 1 0 00-1.414-1.414L11.414 9l-4.146-4.146a1 1 0 00-1.414 1.414L9.707 10z" clipRule="evenodd" />
                    </svg>
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                </div>
              )
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default CustomerSection;