// ‚úÖ stockItemApi.js ‚Äî API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö SN ‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ query
import apiClient from '@/utils/apiClient';

// üîÅ ‡∏£‡∏±‡∏ö SN ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πä‡∏≠‡∏Å (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á serialNumber ‡πÅ‡∏•‡∏∞ barcode ‚Äî ‡∏Ñ‡∏á backward compatible)
export const receiveStockItem = async ({ barcode, serialNumber, receiptItemId } = {}) => {
  try {
    // ‚úÖ backward-compat: ‡πÄ‡∏î‡∏¥‡∏°‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô { serialNumber: sn } ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    const code = barcode || serialNumber;
    if (!code) throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πä‡∏≠‡∏Å');

    // ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (nested) ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏°‡∏µ route adapter ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤/‡πÉ‡∏´‡∏°‡πà
    const payload = { barcode: { barcode: String(code) } };
    // ‡∏ñ‡πâ‡∏≤ serialNumber ‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å barcode ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ (‡∏Å‡∏£‡∏ì‡∏µ STRUCTURED ‡∏ó‡∏µ‡πà‡∏°‡∏µ SN ‡∏à‡∏£‡∏¥‡∏á)
    if (serialNumber && String(serialNumber) !== String(code)) {
      payload.barcode.serialNumber = String(serialNumber);
    }
    if (receiptItemId) payload.receiptItemId = receiptItemId; // ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï

    const res = await apiClient.post('/stock-items/receive-sn', payload);
    return res.data;
  } catch (err) {
    console.error('‚ùå receiveStockItem error:', err);
    const msg = err?.response?.data?.error || err?.response?.data?.message || err?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏î‡πâ';
    throw new Error(msg);
  }
};

// üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ query (barcode, title, ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
export const searchStockItem = async (query) => {
  try {
    if (!query) throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');

    const res = await apiClient.get(`/stock-items/search?query=${encodeURIComponent(query)}`);
    return res.data;
  } catch (err) {
    console.error('‚ùå searchStockItem error:', err);
    throw err;
  }
};

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ stockItem ‡πÄ‡∏õ‡πá‡∏ô SOLD ‡πÅ‡∏ö‡∏ö batch update
export const markStockItemsAsSold = async (stockItemIds) => {
  try {
    await apiClient.patch('/stock-items/mark-sold', {
      stockItemIds, // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏ä‡πà‡∏ô ['xxx', 'yyy']
    });
  } catch (err) {
    console.error('‚ùå markStockItemsAsSold error:', err);
    throw err;
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á stock item ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢ (IN_STOCK) ‡∏ï‡∏≤‡∏° productId
export const getAvailableStockItemsByProduct = async (productId) => {
  try {
    if (!productId) throw new Error('productId ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á');

    const res = await apiClient.get(`/stock-items/available`, {
      params: { productId },
    });
    return res.data;
  } catch (err) {
    console.error('‚ùå getAvailableStockItemsByProduct error:', err);
    throw err;
  }
};








