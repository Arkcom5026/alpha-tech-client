// ‚úÖ stockItemApi.js ‚Äî API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö SN ‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ query
import apiClient from '@/utils/apiClient';

// üîÅ ‡∏£‡∏±‡∏ö SN ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πä‡∏≠‡∏Å
export const receiveStockItem = async ({ barcode, receiptItemId }) => {
  try {
    if (!barcode || !receiptItemId) throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');

    const res = await apiClient.post('/stock-items/receive-sn', {
      barcode,
      receiptItemId,
    });

    return res.data;
  } catch (err) {
    console.error('‚ùå receiveStockItem error:', err);
    throw err;
  }
};

// üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ query (barcode, title, ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
export const searchStockItem = async (query) => {
  try {
    if (!query) throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');

    const res = await apiClient.get(`/stock-items/search?query=${encodeURIComponent(query)}`);
    return res.data;
  } catch (err) {
    console.error('‚ùå searchStockItem error:', err);
    throw err;
  }
};

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ stockItem ‡πÄ‡∏õ‡πá‡∏ô SOLD ‡πÅ‡∏ö‡∏ö batch update
export const markStockItemsAsSold = async (stockItemIds) => {
  try {
    await apiClient.patch('/stock-items/mark-sold', {
      stockItemIds, // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏ä‡πà‡∏ô ['xxx', 'yyy']
    });
  } catch (err) {
    console.error('‚ùå markStockItemsAsSold error:', err);
    throw err;
  }
};


