// ‚úÖ ScanBarcodeListPage.jsx ‚Äî ‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏¥‡∏á SN ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ BarcodeReceiptItem

import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { receiveStockItem } from '../api/stockItemApi';
import apiClient from '@/utils/apiClient';

const ScanBarcodeListPage = () => {
  const { receiptItemId } = useParams();
  const [barcodeList, setBarcodeList] = useState([]); // ‡∏à‡∏≤‡∏Å backend
  const [scannedList, setScannedList] = useState([]); // SN ‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß
  const [inputBarcode, setInputBarcode] = useState('');
  const [loading, setLoading] = useState(false);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ barcode ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á receiptItemId
  useEffect(() => {
    const fetchBarcodes = async () => {
      try {
        const res = await apiClient.get(`/barcode-receipt-items/by-receipt-item/${receiptItemId}`);
        setBarcodeList(res.data || []);
      } catch (err) {
        console.error('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
      }
    };
    if (receiptItemId) fetchBarcodes();
  }, [receiptItemId]);

  const handleScan = async () => {
    const found = barcodeList.find((b) => b.barcode === inputBarcode && !b.stockItemId);
    if (!found) {
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏¢‡∏¥‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      setInputBarcode('');
      return;
    }

    try {
      setLoading(true);
      const result = await receiveStockItem({ barcode: inputBarcode, receiptItemId });

      setScannedList((prev) => [...prev, found]);
      setBarcodeList((prev) => prev.filter((b) => b.barcode !== inputBarcode));
      setInputBarcode('');
    } catch (err) {
      console.error('[receiveStockItem]', err);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á SN');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 space-y-6">
      <h1 className="text-xl font-bold">üéØ ‡∏¢‡∏¥‡∏á SN ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πä‡∏≠‡∏Å</h1>

      <Input
        placeholder="‡∏¢‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà"
        value={inputBarcode}
        onChange={(e) => setInputBarcode(e.target.value)}
        onKeyDown={(e) => e.key === 'Enter' && handleScan()}
        disabled={loading}
      />

      {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏¢‡∏¥‡∏á */}
      <div>
        <h2 className="text-lg font-semibold mt-6">üìã ‡∏£‡∏≠‡∏¢‡∏¥‡∏á SN ({barcodeList.length})</h2>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>#</TableHead>
              <TableHead>Barcode</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {barcodeList.map((item, index) => (
              <TableRow key={item.id}>
                <TableCell>{index + 1}</TableCell>
                <TableCell>{item.barcode}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß */}
      <div>
        <h2 className="text-lg font-semibold mt-6">‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ({scannedList.length})</h2>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>#</TableHead>
              <TableHead>Barcode</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {scannedList.map((item, index) => (
              <TableRow key={item.id}>
                <TableCell>{index + 1}</TableCell>
                <TableCell>{item.barcode}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
};

export default ScanBarcodeListPage;
